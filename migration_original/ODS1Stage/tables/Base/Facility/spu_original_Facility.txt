if @OutputDestination != 'ODS1Stage' or not exists (select 1 from DBMetrics.dbo.ProcessStatus a where a.ServerName = @@SERVERNAME and a.ProcessName = 'SF to ' + replace(db_name(), 'Snow' + 'flake', 'ODS1' + 'Stage') and a.ProcessSource = 'EDP Pipeline' and a.StepName = object_name(@@PROCID) and a.ProcessStatus = 'Complete')
begin
	drop table if exists #swimlane
    select distinct x.ReltioEntityID, x.FacilityID,
        convert(uniqueidentifier, convert(varbinary(20), y.SourceCode)) as SourceID, 
        y.LastUpdateDate, replace(y.FacilityName,'&amp;','&') as FacilityName, 
		y.LegacyKey, y.SourceCode, isnull(y.FacilityCode, x.FacilityCode) as FacilityCode, y.IsClosed, convert(uniqueidentifier, convert(varbinary(20), y.FacilityAccreditationCode)) AS FacilityAccreditationID,
        row_number() over(partition by x.FacilityID order by x.CREATE_DATE desc) as RowRank
    into #swimlane
    from
    (
        select w.* 
        from
        (
            select p.CREATE_DATE, p.RELTIO_ID as ReltioEntityID, p.Facility_CODE as FacilityCode, p.FacilityID, 
                json_query(p.PAYLOAD, '$')  as FacilityJSON
            from raw.FacilityProfileProcessingDeDup as d with (nolock)
            inner join raw.FacilityProfileProcessing as p with (nolock) on p.rawFacilityProfileID = d.rawFacilityProfileID
            where p.PAYLOAD is not null
        ) as w
        where w.FacilityJSON is not null
    ) as x
    cross apply 
    (
        select *
        from openjson(x.FacilityJSON) with (LastUpdateDate datetime '$.LastUpdateDate', FacilityCode varchar(50) '$.FacilityCode', 
            FacilityName varchar(250) '$.FacilityName', SourceCode varchar(25) '$.SourceCode', LegacyKey varchar(25) '$.LegacyKey', IsClosed varchar(25) '$.IsClosed', FacilityAccreditationCode varchar(25) '$.FacilityAccreditationCode')
    ) as y

    --In order to eliminate foreign Key violations, deleting data. this needs to be changed in the future
	delete s
    from #swimlane s
	where len(FacilityCode)>10

	if @OutputDestination = 'ODS1Stage' begin
		update o 
		set			o.FacilityName = s.FacilityName, o.SourceCode = isnull(s.SourceCode, 'Profisee'), 
					o.LegacyKey = s.LegacyKey,
					o.IsClosed = s.IsClosed,
					o.LastUpdateDate = isnull(s.LastUpdateDate, getutcdate()),
					o.FacilityAccreditationID = s.FacilityAccreditationID
		from		#swimlane as s
		inner join	ODS1Stage.Base.Facility as o on o.FacilityCode = s.FacilityCode
		where		s.RowRank = 1
					and(
						--or isnull(o.PracticeID, convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000')) != isnull(s.PracticeID, convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000')) 
						isnull(o.FacilityName, '') != isnull(s.FacilityName, '') 
						or isnull(o.SourceCode, '') != isnull(s.SourceCode, '') 
						or isnull(o.LegacyKey, '') != isnull(s.LegacyKey, '') 
						or isnull(o.IsClosed, 0) != isnull(s.IsClosed, 0) 
						or isnull(o.FacilityAccreditationID, newid()) != isnull(s.FacilityAccreditationID, newid()) 
					)


		insert into ODS1Stage.Base.Facility (ReltioEntityID, FacilityID, FacilityCode,
			FacilityName, SourceCode, LastUpdateDate, LegacyKey, IsClosed, FacilityAccreditationID)
		select s.ReltioEntityID, s.FacilityID, s.FacilityCode, 
			s.FacilityName, isnull(s.SourceCode, 'Profisee'), 
			isnull(s.LastUpdateDate, getutcdate()), s.LegacyKey, s.IsClosed, s.FacilityAccreditationID
		from #swimlane as s
		where not exists (select 1 from ODS1Stage.Base.Facility as o where o.FacilityCode = s.FacilityCode)
			and s.RowRank = 1	
			and s.FacilityCode is not null